library(ggplot2)
library(shiny)
library(shinydashboard)
# Step 1: Import data (assuming you've already done this)
# Step 2: Data Processing and Data Cleaning (assuming you've already done this)
# Step 3: Visit Trends Analysis (assuming you've already done this)
# Step 4: Revenue Comparison between Medical Centers (assuming you've already done this)
# Step 5: Common Diagnoses Analysis (assuming you've already done this)
# Set the primary color to blue
primary_color <- "#1f77b4"
# Create the dashboard UI
ui <- fluidPage(
# Dashboard title
titlePanel("Penda Health Clinic Dashboard"),
# First row
fluidRow(
# Total Visits Card
column(width = 3,
infoBox("Total Visits", sum(visit_counts$Visits), icon = icon("users"))
),
# Total Revenue Card
column(width = 3,
infoBox("Total Revenue", sum(revenue_data$TotalRevenue), icon = icon("dollar"))
),
# Total In-person Visits Card
column(width = 3,
infoBox("Total In-person Visits", sum(merged_data$VisitCategory == "In-person Visit"), icon = icon("hospital"))
),
# Total Telemedicine Visits Card
column(width = 3,
infoBox("Total Telemedicine Visits", sum(merged_data$VisitCategory == "Telemedicine Visit"), icon = icon("video"))
)
),
# Second row
fluidRow(
# Line Graph for Visit Trends
column(width = 6,
plotOutput("visit_trends_plot")
),
# Bar Graph for Performance Evaluation of Medical Centers
column(width = 3,
plotOutput("performance_evaluation_plot")
),
# Donut Chart for Comparison between Cash vs Insurance
column(width = 3,
plotOutput("cash_vs_insurance_plot")
)
),
# Third row
fluidRow(
# Bar Graph for Common Diagnoses
column(width = 6,
plotOutput("common_diagnoses_plot")
),
# Pie Chart for Revenue Comparison between Medical Centers
column(width = 6,
plotOutput("revenue_comparison_plot")
)
)
)
# Create the dashboard server
server <- function(input, output) {
# Visit Trends Analysis (assuming you've already done this)
# Revenue Comparison between Medical Centers (assuming you've already done this)
# Common Diagnoses Analysis (assuming you've already done this)
# Performance Evaluation of Medical Centers (assuming you've already done this)
# Comparison between Cash vs Insurance (assuming you've already done this)
# Render the visualizations in the dashboard
# First row
output$visit_trends_plot <- renderPlot({
# Line Graph for Visit Trends
ggplot(visit_counts, aes(x = VisitMonth, y = Visits)) +
geom_line(color = primary_color, size = 2) +
labs(title = "Visit Trends Over Time",
x = "Month",
y = "Number of Visits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Second row
output$performance_evaluation_plot <- renderPlot({
# Bar Graph for Performance Evaluation of Medical Centers
ggplot(performance_data, aes(x = MedicalCenter, y = VisitCount, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Performance Evaluation of Medical Centers",
x = "Medical Center",
y = "Visit Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$cash_vs_insurance_plot <- renderPlot({
# Donut Chart for Comparison between Cash vs Insurance
ggplot(comparison_data, aes(x = "", y = AverageBilledAmount, fill = Payor)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = "Cash vs Insurance",
x = NULL,
y = NULL) +
theme_void() +
theme(legend.position = "bottom")
})
# Third row
output$common_diagnoses_plot <- renderPlot({
# Bar Graph for Common Diagnoses
ggplot(common_diagnoses, aes(x = reorder(Diagnosis, -VisitCount), y = VisitCount, fill = Diagnosis)) +
geom_bar(stat = "identity") +
labs(title = "Common Diagnoses",
x = "Diagnosis",
y = "Visit Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$revenue_comparison_plot <- renderPlot({
# Pie Chart for Revenue Comparison between Medical Centers
ggplot(revenue_data, aes(x = "", y = TotalRevenue, fill = MedicalCenter)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = "Revenue Comparison between Medical Centers",
x = NULL,
y = NULL) +
theme_void() +
theme(legend.position = "bottom")
})
}
# Run the Shiny app to launch the dashboard
shinyApp(ui, server)
# Create the dashboard server
# Create the dashboard server
server <- function(input, output) {
# Visit Trends Analysis (assuming you've already done this)
visit_counts$VisitMonth <- as.Date(visit_counts$VisitMonth)  # Convert to Date type for proper plotting
# Revenue Comparison between Medical Centers (assuming you've already done this)
# Common Diagnoses Analysis (assuming you've already done this)
# Performance Evaluation of Medical Centers (assuming you've already done this)
# Comparison between Cash vs Insurance (assuming you've already done this)
# Render the visualizations in the dashboard
# First row
output$visit_trends_plot <- renderPlot({
# Line Graph for Visit Trends
ggplot(visit_counts, aes(x = VisitMonth, y = Visits, group = 1)) +
geom_line(color = primary_color, size = 2) +
geom_point(color = primary_color, size = 4) +  # Add points for each data point
labs(title = "Visit Trends Over Time",
x = "Month",
y = "Number of Visits") +
theme_minimal() +
scale_x_date(labels = date_format("%b")) +  # Format the x-axis labels as abbreviated month names
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Rest of the code remains the same as before...
}
# Run the Shiny app to launch the dashboard
shinyApp(ui, server)
# Visualize the performance evaluation using a bar chart
ggplot(performance_data, aes(x = MedicalCenter, y = VisitCount, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Performance Evaluation of Medical Centers",
x = "Medical Center",
y = "Visit Count")
ggplot(comparison_data, aes(x = Payor, y = AverageBilledAmount, fill = Payor)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Billed Amount and Patient Satisfaction",
x = "Payment Method",
y = "Average Billed Amount") +
geom_text(aes(label = round(AverageBilledAmount, 2)), vjust = -0.3)
# Visualize the performance evaluation using a bar chart
ggplot(performance_data, aes(x = MedicalCenter, y = VisitCount, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Performance Evaluation of Medical Centers",
x = "Medical Center",
y = "Visit Count")
ggplot(revenue_data, aes(x = MedicalCenter, y = TotalRevenue, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Revenue Comparison between Medical Centers",
x = "Medical Center",
y = "Total Revenue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate the x-axis labels by 45 degrees
setwd("C:/Users/Pius/OneDrive/Desktop/Penda health Project")
#required libraries
library(dplyr)
library(ggplot2)
library(shiny)
# Read the CSV files into data frames
visit_tbl <- read.csv("Visit_Tbl.csv")
invoice_tbl <- read.csv("Invoice_Tbl.csv")
diagnosis_tbl <- read.csv("Diagnosis_Tbl.csv")
# Merging the three tableS
merged_data <- merge(visit_tbl, invoice_tbl, by = "VisitCode", all.x = TRUE)
merged_data <- merge(merged_data, diagnosis_tbl, by = "VisitCode", all.x = TRUE)
head(merged_data)
str(merged_data)
setwd("C:/Users/Pius/OneDrive/Desktop/Penda health Project")
#required libraries
library(dplyr)
library(ggplot2)
library(shiny)
# Read the CSV files into data frames
visit_tbl <- read.csv("Visit_Tbl.csv")
invoice_tbl <- read.csv("Invoice_Tbl.csv")
diagnosis_tbl <- read.csv("Diagnosis_Tbl.csv")
# Merging the three tableS
merged_data <- merge(visit_tbl, invoice_tbl, by = "VisitCode", all.x = TRUE)
merged_data <- merge(merged_data, diagnosis_tbl, by = "VisitCode", all.x = TRUE)
head(merged_data)
str(merged_data)
summary(merged_data)
Explore the distribution of billed amount
summary(merged_data)
#Explore the distribution of billed amount
ggplot(merged_data, aes(x = Amount)) +
geom_histogram(binwidth = 500, fill = "#1f77b4") +
labs(title = "Distribution of Billed Amount",
x = "Billed Amount",
y = "Frequency") +
theme_minimal()
summary(merged_data)
ggplot(merged_data, aes(x = Amount)) +
geom_histogram(binwidth = 500, fill = "#1f77b4") +
labs(title = "Distribution of Billed Amount",
x = "Billed Amount",
y = "Frequency") +
theme_minimal()
ggplot(merged_data, aes(x = Diagnosis)) +
geom_bar(fill = "#1f77b4") +
labs(title = "Distribution of Diagnoses",
x = "Diagnosis",
y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
# Calculating KPIs
total_visits <- sum(merged_data$VisitCategory == "In-person Visit" | merged_data$VisitCategory == "Telemedicine Visit")
total_revenue <- sum(merged_data$Amount)
total_patients <- n_distinct(merged_data$PatientCode)
# Display KPIs
cat("Total Visits: ", total_visits, "\n")
cat("Total Revenue: $", total_revenue, "\n")
cat("Total Patients: ", total_patients, "\n")
# Calculating KPIs
total_visits <- sum(merged_data$VisitCategory == "In-person Visit" | merged_data$VisitCategory == "Telemedicine Visit")
total_revenue <- sum(merged_data$Amount)
total_patients <- n_distinct(merged_data$PatientCode)
# Display KPIs
cat("Total Visits: ", total_visits, "\n")
cat("Total Revenue: Sh.", total_revenue, "\n")
cat("Total Patients: ", total_patients, "\n")
# Data preparation for monthly trends
merged_data$VisitDateTime <- as.Date(merged_data$VisitDateTime, format = "%m/%d/%Y %H:%M")
monthly_visits <- merged_data %>%
group_by(Month = format(VisitDateTime, "%b %Y")) %>%
summarise(Visits = n())
# Visualization: Area Chart
ggplot(monthly_visits, aes(x = Month, y = Visits, fill = Month)) +
geom_area() +
labs(title = "Monthly Trends of Number of Visits",
x = "Month",
y = "Number of Visits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Data preparation for monthly trends
merged_data$VisitDateTime <- as.Date(merged_data$VisitDateTime, format = "%m/%d/%Y %H:%M")
monthly_visits <- merged_data %>%
filter(format(VisitDateTime, "%b") %in% c("Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct")) %>%
group_by(Month = format(VisitDateTime, "%b %Y")) %>%
summarise(Visits = n())
# Visualization: Line Graph
ggplot(monthly_visits, aes(x = Month, y = Visits, group = 1)) +
geom_line(color = "#1f77b4", size = 1.5) +
geom_point(color = "#1f77b4", size = 3) +
labs(title = "Monthly Trends of Number of Visits",
x = "Month",
y = "Number of Visits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Data preparation for monthly trends
merged_data$VisitDateTime <- as.Date(merged_data$VisitDateTime, format = "%m/%d/%Y %H:%M")
monthly_visits <- merged_data %>%
filter(format(VisitDateTime, "%b") %in% c("Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct")) %>%
group_by(Month = factor(format(VisitDateTime, "%b %Y"), levels = c("Mar 2022", "Apr 2022", "May 2022", "Jun 2022", "Jul 2022", "Aug 2022", "Sep 2022", "Oct 2022"))) %>%
summarise(Visits = n())
# Visualization: Line Graph
ggplot(monthly_visits, aes(x = Month, y = Visits, group = 1)) +
geom_line(color = "#1f77b4", size = 1.5) +
geom_point(color = "#1f77b4", size = 3) +
labs(title = "Monthly Trends of Number of Visits",
x = "Month",
y = "Number of Visits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Data preparation for visits per medical center
visits_per_center <- merged_data %>%
group_by(MedicalCenter) %>%
summarise(Visits = n()) %>%
arrange(desc(Visits))
# Visualization: Bar Chart
ggplot(visits_per_center, aes(x = reorder(MedicalCenter, -Visits), y = Visits, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Number of Visits per Medical Center",
x = "Medical Center",
y = "Number of Visits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Data preparation for revenue per medical center
revenue_per_center <- merged_data %>%
group_by(MedicalCenter) %>%
summarise(TotalRevenue = sum(Amount)) %>%
arrange(desc(TotalRevenue))
# Visualization: Stacked Bar Chart
ggplot(revenue_per_center, aes(x = reorder(MedicalCenter, -TotalRevenue), y = TotalRevenue, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Revenue Generated by Medical Centers",
x = "Medical Center",
y = "Total Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Data preparation for visits per medical center
visits_per_center <- merged_data %>%
group_by(MedicalCenter) %>%
summarise(Visits = n()) %>%
arrange(desc(Visits))
# Visualization: Bar Chart
ggplot(visits_per_center, aes(x = reorder(MedicalCenter, -Visits), y = Visits, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Number of Visits per Medical Center",
x = "Medical Center",
y = "Number of Visits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Data preparation for revenue per medical center
revenue_per_center <- merged_data %>%
group_by(MedicalCenter) %>%
summarise(TotalRevenue = sum(Amount)) %>%
arrange(desc(TotalRevenue))
# Visualization: Stacked Bar Chart
ggplot(revenue_per_center, aes(x = reorder(MedicalCenter, -TotalRevenue), y = TotalRevenue, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Revenue Generated by Medical Centers",
x = "Medical Center",
y = "Total Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
# Data preparation for revenue per medical center
revenue_per_center <- merged_data %>%
group_by(MedicalCenter) %>%
summarise(TotalRevenue = sum(Amount) / 1000000) %>%
arrange(desc(TotalRevenue))
# Visualization: Stacked Bar Chart with revenue in millions
ggplot(revenue_per_center, aes(x = reorder(MedicalCenter, -TotalRevenue), y = TotalRevenue, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Revenue Generated by Medical Centers",
x = "Medical Center",
y = "Total Revenue (Millions)") +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +  # Format y-axis labels in millions
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
# Data preparation for revenue per medical center
revenue_per_center <- merged_data %>%
group_by(MedicalCenter) %>%
summarise(TotalRevenue = sum(Amount) / 1000) %>%
arrange(desc(TotalRevenue))
# Visualization: Stacked Bar Chart with revenue in millions
ggplot(revenue_per_center, aes(x = reorder(MedicalCenter, -TotalRevenue), y = TotalRevenue, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Revenue Generated by Medical Centers",
x = "Medical Center",
y = "Total Revenue (Millions)") +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +  # Format y-axis labels in millions
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
# Data preparation for revenue per medical center
revenue_per_center <- merged_data %>%
group_by(MedicalCenter) %>%
summarise(TotalRevenue = sum(Amount)) %>%
arrange(desc(TotalRevenue))
# Visualization: Stacked Bar Chart with revenue in millions
ggplot(revenue_per_center, aes(x = reorder(MedicalCenter, -TotalRevenue), y = TotalRevenue, fill = MedicalCenter)) +
geom_bar(stat = "identity") +
labs(title = "Revenue Generated by Medical Centers",
x = "Medical Center",
y = "Total Revenue (Millions)") +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +  # Format y-axis labels in millions
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
# Data preparation for diagnoses and total patients recorded
diagnoses_table <- merged_data %>%
group_by(Diagnosis) %>%
summarise(TotalPatients = n()) %>%
arrange(desc(TotalPatients))
# Display the matrix table
library(kableExtra)
setwd("C:/Users/Pius/OneDrive/Desktop/Penda health Project")
#required libraries
install.packages("kableExtra")
library(dplyr)
library(ggplot2)
library(shiny)
# Read the CSV files into data frames
visit_tbl <- read.csv("Visit_Tbl.csv")
invoice_tbl <- read.csv("Invoice_Tbl.csv")
diagnosis_tbl <- read.csv("Diagnosis_Tbl.csv")
# Merging the three tableS
merged_data <- merge(visit_tbl, invoice_tbl, by = "VisitCode", all.x = TRUE)
merged_data <- merge(merged_data, diagnosis_tbl, by = "VisitCode", all.x = TRUE)
head(merged_data)
str(merged_data)
library(kableExtra)
library(dplyr)
library(ggplot2)
library(shiny)
# Data preparation for diagnoses and total patients recorded
diagnoses_table <- merged_data %>%
group_by(Diagnosis) %>%
summarise(TotalPatients = n()) %>%
arrange(desc(TotalPatients))
# Display the matrix table
library(kableExtra)
kable(diagnoses_table, caption = "Diagnoses and Total Patients Recorded") %>%
kable_classic(full_width = F) %>%
add_header_above(c("Diagnosis" = 1, "Total Patients" = 1))
# Data preparation for monthly trends
merged_data$VisitDateTime <- as.Date(merged_data$VisitDateTime, format = "%m/%d/%Y %H:%M")
monthly_visits <- merged_data %>%
filter(format(VisitDateTime, "%b") %in% c("Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct")) %>%
group_by(Month = factor(format(VisitDateTime, "%b %Y"), levels = c("Mar 2022", "Apr 2022", "May 2022", "Jun 2022", "Jul 2022", "Aug 2022", "Sep 2022", "Oct 2022"))) %>%
summarise(Visits = n())
# Visualization: Line Graph
ggplot(monthly_visits, aes(x = Month, y = Visits, group = 1)) +
geom_line(color = "#1f77b4", size = 1.5) +
geom_point(color = "#1f77b4", size = 3) +
labs(title = "Monthly Trends of Number of Visits",
x = "Month",
y = "Number of Visits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("C:/Users/Pius/OneDrive/Desktop/Penda health Project")
# Set warning behavior to ignore
options(warn = -1)  # -1 suppresses all warnings
# Load required libraries
library(kableExtra)
library(dplyr)
library(ggplot2)
library(shiny)
library(knitr)
# Read the CSV files into data frames
visit_tbl <- read.csv("Visit_Tbl.csv")
invoice_tbl <- read.csv("Invoice_Tbl.csv")
diagnosis_tbl <- read.csv("Diagnosis_Tbl.csv")
# Merging the three tableS
merged_data <- merge(visit_tbl, invoice_tbl, by = "VisitCode", all.x = TRUE)
merged_data <- merge(merged_data, diagnosis_tbl, by = "VisitCode", all.x = TRUE)
head(merged_data)
str(merged_data)
setwd("C:/Users/Pius/OneDrive/Desktop/Penda health Project")
# Set warning behavior to ignore
options(warn = -1)  # -1 suppresses all warnings
# Load required libraries
install.packages('kableExtra')
library(kableExtra)
library(dplyr)
library(ggplot2)
library(shiny)
library(knitr)
# Read the CSV files into data frames
visit_tbl <- read.csv("Visit_Tbl.csv")
invoice_tbl <- read.csv("Invoice_Tbl.csv")
diagnosis_tbl <- read.csv("Diagnosis_Tbl.csv")
# Merging the three tableS
merged_data <- merge(visit_tbl, invoice_tbl, by = "VisitCode", all.x = TRUE)
merged_data <- merge(merged_data, diagnosis_tbl, by = "VisitCode", all.x = TRUE)
head(merged_data)
str(merged_data)
install.packages("kableExtra")
setwd("C:/Users/Pius/OneDrive/Desktop/Penda health Project")
# Set warning behavior to ignore
options(warn = -1)  # -1 suppresses all warnings
# Load required libraries
library(kableExtra)
library(dplyr)
library(ggplot2)
library(shiny)
library(knitr)
# Read the CSV files into data frames
visit_tbl <- read.csv("Visit_Tbl.csv")
invoice_tbl <- read.csv("Invoice_Tbl.csv")
diagnosis_tbl <- read.csv("Diagnosis_Tbl.csv")
# Merging the three tableS
merged_data <- merge(visit_tbl, invoice_tbl, by = "VisitCode", all.x = TRUE)
merged_data <- merge(merged_data, diagnosis_tbl, by = "VisitCode", all.x = TRUE)
head(merged_data)
str(merged_data)
# Data preparation for diagnoses and total patients recorded
diagnoses_table <- merged_data %>%
group_by(Diagnosis) %>%
summarise(TotalPatients = n()) %>%
arrange(desc(TotalPatients))
# Display the matrix table
kable(diagnoses_table, caption = "Diagnoses and Total Patients Recorded") %>%
kable_classic(full_width = F) %>%
add_header_above(c("Diagnosis" = 1, "Total Patients" = 1))
install.packages("pander")
# Data preparation for diagnoses and total patients recorded
diagnoses_table <- merged_data %>%
group_by(Diagnosis) %>%
summarise(TotalPatients = n()) %>%
arrange(desc(TotalPatients))
# Display the matrix table
pander::pander(diagnoses_table, caption = "Diagnoses and Total Patients Recorded")
q()
q()
